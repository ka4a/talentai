# Generated by Django 2.2.17 on 2020-11-23 13:18

from django.db import migrations


# Note(ZOO-758): stage - status - deal stage mapping
# Note(ZOO-706): stage - status mapping
STAGE_STATUS_DEAL_STAGES_MAPPING = {
    'associated': [
        ('associated_candidate_to_job', 'Associated Candidate to Job', 'out_of'),
        ('interested_and_suitable', 'Interested and Suitable', 'out_of'),
        ('not_interested_and_suitable', 'Not interested and Suitable', 'out_of'),
        ('not_interested_and_unsuitable', 'Not interested and Unsuitable', 'out_of'),
    ],
    'pre_screening': [
        ('contacted', 'Contacted', 'out_of'),
        ('met_unsuitable', 'Met - Unsuitable', 'out_of'),
        ('met_suitable', 'Met - Suitable', 'out_of'),
    ],
    'submissions': [
        ('applied_by_candidate', 'Applied by Candidate', 'first_round'),
        ('submitted_by_agent', 'Submitted by Agent', 'first_round'),
        (
            'submitted_by_internal_recruiter',
            'Submitted by Internal Recruiter',
            'first_round',
        ),
        ('submitted_by_referral', 'Submitted by Referral', 'first_round'),
        ('submitted_to_client', 'Submitted to Client', 'first_round'),
        ('submitted_to_hiring_manager', 'Submitted to Hiring Manager', 'first_round'),
    ],
    'screening': [
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('on_hold_by_client', 'On Hold // On Hold by Client', 'first_round'),
        (
            'suitable_approved_by_client',
            'Suitable // Approved by Client',
            'first_round',
        ),
        ('rejected_by_agent', 'Rejected by Agent', 'out_of'),
    ],
    'first_interview': [
        (
            'confirmed_client_availability',
            'Confirmed Client Availability',
            'first_round',
        ),
        (
            'confirmed_candidate_availability',
            'Confirmed Candidate Availability',
            'first_round',
        ),
        ('scheduled_interview', 'Scheduled Interview', 'first_round'),
        ('on_hold_by_client', 'On Hold // On Hold by Client', 'first_round'),
        (
            'completed_interview_waiting_for_feedback',
            'Completed Interview (waiting for feedback)',
            'first_round',
        ),
        (
            'passed_interview_proceed_to_next_stage',
            'Passed Interview (proceed to next stage)',
            'first_round',
        ),
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'interviewing': [
        (
            'confirmed_client_availability',
            'Confirmed Client Availability',
            'intermediate_round',
        ),
        (
            'confirmed_candidate_availability',
            'Confirmed Candidate Availability',
            'intermediate_round',
        ),
        ('scheduled_interview', 'Scheduled Interview', 'intermediate_round'),
        ('on_hold_by_client', 'On Hold // On Hold by Client', 'intermediate_round'),
        (
            'completed_interview_waiting_for_feedback',
            'Completed Interview (waiting for feedback)',
            'intermediate_round',
        ),
        (
            'passed_interview_proceed_to_next_stage',
            'Passed Interview (proceed to next stage)',
            'intermediate_round',
        ),
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'final_interview': [
        (
            'confirmed_client_availability',
            'Confirmed Client Availability',
            'final_round',
        ),
        (
            'confirmed_candidate_availability',
            'Confirmed Candidate Availability',
            'final_round',
        ),
        ('scheduled_interview', 'Scheduled Interview', 'final_round'),
        ('on_hold_by_client', 'On Hold // On Hold by Client', 'final_round'),
        (
            'completed_interview_waiting_for_feedback',
            'Completed Interview (waiting for feedback)',
            'final_round',
        ),
        (
            'passed_interview_proceed_to_next_stage',
            'Passed Interview (proceed to next stage)',
            'final_round',
        ),
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'offering': [
        ('decided_to_offer', 'Decided to Offer', 'offer'),
        ('prepared_the_offer', 'Prepared the Offer', 'offer'),
        ('presented_the_offer', 'Presented the Offer', 'offer'),
        ('offer_accepted', 'Offer Accepted', 'offer'),
        ('offer_declined', 'Offer Declined', 'out_of'),
        ('offer_withdrawn', 'Offer Withdrawn', 'out_of'),
    ],
    'hired': [
        ('pending_start_date', 'Pending Start Date', 'out_of'),
        ('started', 'Started', 'out_of'),
        ('no_show', 'No Show', 'out_of'),
        ('probation_passed', 'Probation Passed', 'out_of'),
        ('probation_not_passed', 'Probation Not Passed', 'out_of'),
        (
            'terminated_during_warranty_period',
            'Terminated During Warranty Period',
            'out_of',
        ),
        (
            'terminated_during_probation_period',
            'Terminated During Probation Period',
            'out_of',
        ),
        (
            'resigned_during_warranty_period',
            'Resigned During Warranty Period',
            'out_of',
        ),
        (
            'resigned_during_probation_period',
            'Resigned During Probation Period',
            'out_of',
        ),
    ],
}


def add_proposal_statuses(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    Proposal = apps.get_model('core', 'Proposal')
    Proposal.objects.using(db_alias).delete()

    ContentType = apps.get_model('contenttypes', 'ContentType')
    Client = apps.get_model('core', 'Client')
    Agency = apps.get_model('core', 'Agency')
    OrganizationProposalStatus = apps.get_model('core', 'OrganizationProposalStatus')
    OrganizationProposalStatus.objects.using(db_alias).delete()
    ProposalStatus = apps.get_model('core', 'ProposalStatus')
    ProposalStatus.objects.using(db_alias).delete()
    order = 100
    for stage, status_tuple_list in STAGE_STATUS_DEAL_STAGES_MAPPING.items():
        for group, status, deal_stage in status_tuple_list:
            proposal_status = ProposalStatus.objects.using(db_alias).create(
                stage=stage,
                group=group,
                status_en=status,
                deal_stage=deal_stage,
                default_order=order,
                default=True,
            )
            order += 100

    client_type = ContentType.objects.get_for_model(Client)
    agency_type = ContentType.objects.get_for_model(Agency)

    organizations = []
    organizations.extend([(client_type, client.pk) for client in Client.objects.all()])
    organizations.extend([(agency_type, agency.pk) for agency in Agency.objects.all()])
    statuses = list(ProposalStatus.objects.filter(default=True))

    for org_type, org_id in organizations:
        for status in statuses:
            OrganizationProposalStatus.objects.create(
                status=status,
                org_id=org_id,
                org_content_type=org_type,
                order=status.default_order,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0204_proposal_stages_and_statuses'),
    ]

    operations = [
        migrations.RunPython(add_proposal_statuses, migrations.RunPython.noop)
    ]
