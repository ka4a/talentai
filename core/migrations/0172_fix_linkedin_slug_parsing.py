# Generated by Django 2.2.11 on 2020-04-21 10:05

from django.db import migrations
from django.db.utils import IntegrityError
from urllib.parse import urlsplit, unquote
from django.db.transaction import atomic


def parse_linkedin_slug(url, new):
    """Parse linkedin username, return None if no slug found."""
    parsed_url = urlsplit(url)

    valid_url = parsed_url.hostname and (
        parsed_url.hostname == 'linkedin.com'
        or parsed_url.hostname.endswith('.linkedin.com')
    )
    if not valid_url:
        return None

    split_path = parsed_url.path.split('/')

    try:
        if split_path[1] == 'in' and split_path[2]:
            if new:
                return unquote(split_path[2]).strip()
            else:
                return split_path[2].strip()
    except IndexError:
        return None


def update_linkedin_slugs(apps, schema_editor):
    print()
    Candidate = apps.get_model('core', 'Candidate')

    for c in Candidate.objects.iterator(256):
        try:
            with atomic():
                c.linkedin_slug = parse_linkedin_slug(c.linkedin_url, new=True)
                c.save()
        except IntegrityError:
            print(f'skipping {c.id}')


def update_linkedin_slugs_old(apps, schema_editor):
    print()
    Candidate = apps.get_model('core', 'Candidate')

    for c in Candidate.objects.iterator(256):
        try:
            with atomic():
                c.linkedin_slug = parse_linkedin_slug(c.linkedin_url, new=False)
                c.save()
        except IntegrityError:
            print(f'skipping {c.id}')


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0171_new_longlist_statuses'),
    ]

    operations = [
        migrations.RunPython(update_linkedin_slugs, update_linkedin_slugs_old)
    ]
