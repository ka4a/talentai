# Generated by Django 2.2.2 on 2019-08-14 09:33

from django.db import migrations


PRIMARY_CONTACT_FIRST_NAME = 'Agency'
PRIMARY_CONTACT_LAST_NAME = 'Primary Contact'


def add_primary_contacts(apps, schema_editor):
    User = apps.get_model('core', 'User')

    Agency = apps.get_model('core', 'Agency')
    AgencyAdministrator = apps.get_model('core', 'AgencyAdministrator')

    agency_primary_contact = None
    for agency in Agency.objects.filter(primary_contact__isnull=True):
        email = agency.contact_email
        if email:
            agency_primary_contact, created = User.objects.get_or_create(email=email)
            if created:
                agency_primary_contact.first_name = PRIMARY_CONTACT_FIRST_NAME
                agency_primary_contact.last_name = PRIMARY_CONTACT_LAST_NAME
                agency_primary_contact.is_waiting_invite = True
                agency_primary_contact.is_active = False
                agency_primary_contact.email_candidate_proposed_for_job = False
                agency_primary_contact.email_client_changed_proposal_status = False
                agency_primary_contact.email_client_assigned_agency_for_job = False
                agency_primary_contact.email_client_created_contract = True
                agency_primary_contact.email_client_updated_job = False
                agency_primary_contact.is_waiting_invite = True
            agency_primary_contact.save()
        else:
            agency_admin = AgencyAdministrator.objects.filter(agency=agency).first()
            if agency_admin:
                agency_primary_contact=agency_admin.user

        if agency_primary_contact:
            agency.primary_contact = agency_primary_contact
            agency.save()

    Client = apps.get_model('core', 'Client')
    TalentAssociate = apps.get_model('core', 'TalentAssociate')

    for client in Client.objects.filter(primary_contact__isnull=True):
        talent_associate = TalentAssociate.objects.filter(client=client).first()
        if talent_associate:
            client.primary_contact = talent_associate.user
            client.save()


def revert_add_primary_contacts(apps, schema_editor):
    Agency = apps.get_model('core', 'Agency')
    for agency in Agency.objects.all():
        primary_contact = agency.primary_contact
        if primary_contact is not None:
            agency.contact_email = primary_contact.email
            agency.primary_contact = None
            agency.save()
            if primary_contact.is_waiting_invite:
                primary_contact.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0100_contract'),
    ]

    operations = [
        migrations.RunPython(
            add_primary_contacts,
            revert_add_primary_contacts
        )
    ]
