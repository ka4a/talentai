# Generated by Django 2.2.5 on 2019-10-08 09:16

from django.db import migrations, models
from django.core.management.sql import emit_post_migrate_signal

STATUSES = [
    ['not_contacted', 'Not contacted'],
    ['interested', 'Interested'],
    ['not_interested', 'Not interested'],
    ['pending_feedback', 'Pending feedback'],
    ['interviewed_internally', 'Interviewed internally'],
    ['early_rejected', 'Rejected']
]


def apply_new_longlist_proposal_statuses(apps, schema_editor):
    """Add default longlist proposal statuses"""
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(0, False, db_alias)

    ProposalStatus = apps.get_model('core', 'ProposalStatus')
    Proposal = apps.get_model('core', 'Proposal')

    status_objects = []
    start_order = ProposalStatus.objects.count() + 1

    for status_order, (status_group, status) in enumerate(STATUSES, start_order):
        status_objects.append(
            ProposalStatus.objects.create(
                group=status_group,
                status_en=status,
                default=True,
                default_order=status_order
            )
        )

    # If migration has been unapplied, longlisted candidates should get their
    # longlist status back
    pending_review = ProposalStatus.objects.get(group='new', default=True)
    not_contacted = ProposalStatus.objects.get(group='not_contacted',
                                               default=True)
    Proposal.objects.filter(stage='longlist', status=pending_review).update(
        status=not_contacted
    )


def revert_apply_new_longlist_proposal_statuses(apps, schema_editor):
    """Remove default longlist proposal statuses"""
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(0, False, db_alias)

    Proposal = apps.get_model('core', 'Proposal')
    ProposalStatus = apps.get_model('core', 'ProposalStatus')
    ProposalStatusHistory = apps.get_model('core', 'ProposalStatusHistory')

    status_groups = []

    for group, status in STATUSES:
        status_groups.append(group)

    proposal_statuses = ProposalStatus.objects.filter(
        group__in=status_groups
    )

    pending_review = ProposalStatus.objects.get(group='new', default=True)

    # Set shortlist default status for longlisted candidates for saving them
    # if migration unapplies
    Proposal.objects.filter(status__in=proposal_statuses).update(status=pending_review)
    ProposalStatusHistory.objects.filter(status__in=proposal_statuses).delete()
    proposal_statuses.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0110_required_names'),
    ]

    operations = [
        migrations.AlterField(
            model_name='proposalstatus',
            name='group',
            field=models.CharField(choices=[('new', 'New'), ('proceeding', 'Proceeding'), ('approved', 'CV approved'), ('rejected', 'CV rejected'), ('interviewing', 'Interviewing'), ('offer', 'Offer'), ('offer_accepted', 'Offer Accepted'), ('offer_declined', 'Offer Declined'), ('candidate_quit', 'Candidate Quits Process'), ('closed', 'Closed'), ('not_contacted', 'Not contacted'), ('interested', 'Interested'), ('not_interested', 'Not interested'), ('pending_feedback', 'Pending feedback'), ('interviewed_internally', 'Interviewed internally'), ('early_rejected', 'Rejected')], max_length=32),
        ),
        migrations.RunPython(
            apply_new_longlist_proposal_statuses,
            revert_apply_new_longlist_proposal_statuses
        )
    ]
