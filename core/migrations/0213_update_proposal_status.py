# Generated by Django 2.2.17 on 2020-11-23 13:18

from django.db import migrations


STAGE_STATUS_DEAL_STAGES_MAPPING = {
    'associated': [
        ('not_interested_and_unsuitable', 'Not interested and Unsuitable', 'out_of'),
    ],
    'pre_screening': [('met_unsuitable', 'Met - Unsuitable', 'out_of'),],
    'screening': [
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_agent', 'Rejected by Agent', 'out_of'),
    ],
    'first_interview': [
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'interviewing': [
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'final_interview': [
        ('rejected_by_client', 'Rejected // Rejected by Client', 'out_of'),
        ('rejected_by_candidate', 'Rejected by Candidate', 'out_of'),
    ],
    'offering': [
        ('offer_declined', 'Offer Declined', 'out_of'),
        ('offer_withdrawn', 'Offer Withdrawn', 'out_of'),
    ],
}


def add_proposal_statuses(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    ContentType = apps.get_model('contenttypes', 'ContentType')
    Client = apps.get_model('core', 'Client')
    Agency = apps.get_model('core', 'Agency')
    OrganizationProposalStatus = apps.get_model('core', 'OrganizationProposalStatus')
    ProposalStatus = apps.get_model('core', 'ProposalStatus')
    order = 2000
    for stage, status_tuple_list in STAGE_STATUS_DEAL_STAGES_MAPPING.items():
        for group, status, deal_stage in status_tuple_list:
            proposal_status = ProposalStatus.objects.using(db_alias).create(
                stage=stage,
                group=group,
                status_en=status,
                deal_stage=deal_stage,
                default_order=order,
                default=True,
            )
            order += 100

    client_type = ContentType.objects.get_for_model(Client)
    agency_type = ContentType.objects.get_for_model(Agency)

    organizations = []
    organizations.extend([(client_type, client.pk) for client in Client.objects.all()])
    organizations.extend([(agency_type, agency.pk) for agency in Agency.objects.all()])
    statuses = list(ProposalStatus.objects.filter(default=True))

    for org_type, org_id in organizations:
        for status in statuses:
            OrganizationProposalStatus.objects.using(db_alias).create(
                status=status,
                org_id=org_id,
                org_content_type=org_type,
                order=status.default_order,
            )


def delete_proposal_statuses(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    Proposal = apps.get_model('core', 'Proposal')

    ContentType = apps.get_model('contenttypes', 'ContentType')
    Client = apps.get_model('core', 'Client')
    Agency = apps.get_model('core', 'Agency')
    OrganizationProposalStatus = apps.get_model('core', 'OrganizationProposalStatus')
    ProposalStatus = apps.get_model('core', 'ProposalStatus')

    statuses = list()

    for stage, status_tuple_list in STAGE_STATUS_DEAL_STAGES_MAPPING.items():
        for group, status, deal_stage in status_tuple_list:
            statuses.extend(
                ProposalStatus.objects.using(db_alias)
                .filter(stage=stage, group=group, status_en=status)
                .all()
            )

    client_type = ContentType.objects.get_for_model(Client)
    agency_type = ContentType.objects.get_for_model(Agency)

    for status in statuses:
        OrganizationProposalStatus.objects.using(db_alias).filter(
            status=status
        ).delete()

    for status in statuses:
        status.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0212_add_proposal_is_rejected'),
    ]

    operations = [migrations.RunPython(delete_proposal_statuses, add_proposal_statuses)]
