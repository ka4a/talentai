# Generated by Django 3.1.10 on 2021-06-01 05:12

from django.db import migrations


def get_or_set_current_interview_maybe(proposal):
    if not proposal.current_interview:
        proposal.current_interview = proposal.interviews.filter(
            current_schedule__status='to_be_scheduled'
        ).first()
        proposal.save(update_fields=['current_interview'])


def update_proposal_statuses_remake_interviews(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    ProposalInterview = apps.get_model('core', 'ProposalInterview')
    ProposalInterviewSchedule = apps.get_model('core', 'ProposalInterviewSchedule')
    OrganizationProposalStatus = apps.get_model('core', 'OrganizationProposalStatus')
    ProposalStatusHistory = apps.get_model('core', 'ProposalStatusHistory')
    Proposal = apps.get_model('core', 'Proposal')

    ProposalInterview.objects.using(db_alias).all().delete()

    def create_default_interviews(proposal):
        interview_templates = proposal.job.interview_templates.all()
        for template in interview_templates:
            interview = ProposalInterview.objects.create(
                proposal=proposal,
                interview_type=template.interview_type,
                order=template.order,
                description=template.description,
                interviewer=template.interviewer,
                created_by=proposal.job.owner,
            )
            interview.current_schedule = ProposalInterviewSchedule.objects.create(
                interview_id=interview.id, status='to_be_scheduled'
            )
            interview.save()
        get_or_set_current_interview_maybe(proposal)

    for proposal in Proposal.objects.using(db_alias).all():
        create_default_interviews(proposal)

    ProposalStatus = apps.get_model('core', 'ProposalStatus')
    ProposalStatus.objects.using(db_alias).filter(
        stage='interviewing', group='to_be_scheduled'
    ).update(group='interviewing', status_en='Interviewing')
    interviewing_status = (
        ProposalStatus.objects.using(db_alias).filter(group='interviewing').first()
    )
    TO_DELETE = [
        'to_be_scheduled',
        'pending_candidate_confirmation',
        'confirmed_client_availability',
        'scheduled',
        'completed_pending_feedback',
    ]
    Proposal.objects.using(db_alias).filter(status__group__in=TO_DELETE).update(
        status=interviewing_status
    )
    ProposalStatusHistory.objects.using(db_alias).filter(
        status__group__in=TO_DELETE
    ).update(status=interviewing_status)
    OrganizationProposalStatus.objects.using(db_alias).filter(
        status__group__in=TO_DELETE
    ).delete()
    ProposalStatus.objects.using(db_alias).filter(group__in=TO_DELETE).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0263_improved_interview_flow'),
    ]

    operations = [
        migrations.RunPython(
            update_proposal_statuses_remake_interviews, migrations.RunPython.noop
        )
    ]
