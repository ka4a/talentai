# Generated by Django 2.2.11 on 2020-03-23 07:36

from django.db import migrations, models


SKILL_DOMAINS = {
    'adas': 'ADAS',
    'aftermarket': 'Aftermarket',
    'artificial_intelligence': 'Artificial Intelligence',
    'battery': 'Battery',
    'bearings': 'Bearings',
    'big_data': 'Big Data',
    'biomass': 'Biomass',
    'bluetooth_and_ble': 'Bluetooth & BLE',
    'body': 'Body',
    'brakes': 'Brakes',
    'capacitive_touch': 'Capacitive Touch',
    'chassis': 'Chassis',
    'civil_engineering': 'Civil Engineering',
    'closures': 'Closures',
    'cloud': 'Cloud',
    'cloud_systems': 'Cloud Systems',
    'cockpit_electronics': 'Cockpit Electronics',
    'commodities': 'Commodities',
    'concurrent_programming': 'Concurrent Programming',
    'connectivity': 'Connectivity',
    'cyber_security': 'Cyber Security',
    'data_structures': 'Data Structures',
    'data_or_event_driven_computation': 'Data/Event Driven Computation',
    'digital_maps': 'Digital Maps',
    'discreet': 'Discreet',
    'distributed_systems': 'Distributed Systems',
    'driveline': 'Driveline',
    'eda': 'EDA',
    'edge_computing': 'Edge Computing',
    'electrical_equipment': 'Electrical Equipment',
    'emissions': 'Emissions',
    'epc': 'EPC',
    'ev': 'EV',
    'fluid_transfer_solutions': 'Fluid Transfer Solutions (FTS)',
    'fpga_or_asic': 'FPGA/ASIC',
    'fuel_cell': 'Fuel Cell',
    'general_infrastructure': 'General Infrastructure',
    'gis_services': 'GIS Services',
    'heterogeneous_systems': 'Heterogeneous Systems',
    'hev': 'HEV',
    'high_performance_computing': 'High Performance Computing',
    'hmi': 'HMI',
    'hvac': 'HVAC',
    'hydraulics': 'Hydraulics',
    'iaas': 'IaaS',
    'infotainment': 'Infotainment',
    'interiors': 'Interiors',
    'it_architecture': 'IT Architecture',
    'lsi': 'LSI',
    'mapping': 'Mapping',
    'marketing': 'Marketing',
    'materials': 'Materials',
    'mcu_or_cpu': 'MCU/CPU',
    'mechanical_equipment': 'Mechanical Equipment',
    'memory': 'Memory',
    'microservices': 'Microservices',
    'mosfet_and_igbt': 'MOSFET & IGBT',
    'motor_driver_ics': 'Motor Driver IC\'s',
    'networks_and_servers': 'Networks & Servers',
    'nvh': 'NVH',
    'oil_and_gas': 'Oil & Gas',
    'optics': 'Optics',
    'paas': 'PaaS',
    'parallel_computing': 'Parallel Computing',
    'passive_safety': 'Passive Safety',
    'pmic': 'PMIC',
    'power_generation': 'Power Generation',
    'power_transmission_and_distribution': 'Power Transmission & Distribution',
    'powertrain': 'Powertrain',
    'quality': 'Quality',
    'real_estate': 'Real Estate',
    'rf_or_zigbee': 'RF/Zigbee',
    'saas': 'SaaS',
    'scada': 'SCADA',
    'sealing_solutions': 'Sealing Solutions',
    'seating': 'Seating',
    'sensors': 'Sensors',
    'smart_grid': 'Smart Grid',
    'soc': 'SOC',
    'solar': 'Solar',
    'steering': 'Steering',
    'storage_it': 'Storage - IT',
    'telematics': 'Telematics',
    'thermal_power_plants': 'Thermal Power Plants',
    'wifi': 'Wi-fi',
    'wind': 'Wind',
}


def apply_skill_domains(apps, schema_editor):
    SkillDomain = apps.get_model('core', 'SkillDomain')
    Candidate = apps.get_model('core', 'Candidate')

    candidates = Candidate.objects.filter(~models.Q(skill_domain=''))

    domains = [SkillDomain(name=name) for name in SKILL_DOMAINS.values()]
    SkillDomain.objects.bulk_create(domains)

    for candidate in candidates:
        domain_name = SKILL_DOMAINS[candidate.skill_domain]
        domain_obj = SkillDomain.objects.filter(name=domain_name).first()
        candidate.skill_domain_fk = domain_obj
        candidate.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0159_django_money_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillDomain',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={'abstract': False,},
        ),
        migrations.AddField(
            model_name='candidate',
            name='skill_domain_fk',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.deletion.SET_NULL,
                related_name='candidates',
                to='core.SkillDomain',
            ),
        ),
        migrations.RunPython(apply_skill_domains, migrations.RunPython.noop),
        migrations.RemoveField(model_name='candidate', name='skill_domain',),
        migrations.RenameField(
            model_name='candidate', old_name='skill_domain_fk', new_name='skill_domain',
        ),
    ]
