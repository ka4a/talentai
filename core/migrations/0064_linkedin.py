# Generated by Django 2.1.7 on 2019-03-29 10:38

import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db import transaction
from django.db.utils import IntegrityError

from core.utils import parse_linkedin_slug


def set_linkedin_slug(apps, schema_editor):
    Candidate = apps.get_model('core', 'Candidate')

    for c in Candidate.objects.all():
        c.linkedin_slug = parse_linkedin_slug(c.linkedin_url)
        c.save()


def copy_li_data(apps, schema_editor):
    Candidate = apps.get_model('core', 'Candidate')
    CandidateLinkedinData = apps.get_model('core', 'CandidateLinkedinData')

    for c in Candidate.objects.filter().all():
        if not c.li_data:
            continue

        url = None

        api_data = c.li_data.get('api_data')
        if api_data:
            try:
                url = api_data.get('contactInfo', {}).get('linkedIn')
            except AttributeError:
                continue

        if not url:
            url = c.li_data.get('input_linkedin_url')

        if not url:
            print('no url for {}'.format(c.id))
            continue

        url = url.split('?', 1)[0].split('#', 1)[0]

        c.linkedin_url = url
        c.linkedin_slug = parse_linkedin_slug(c.linkedin_url)

        with transaction.atomic():
            try:
                c.save()
            except IntegrityError:
                print('couldnt save {} {}'.format(c.id, c.linkedin_slug))
                continue

            if c.li_data['api_data']:
                CandidateLinkedinData.objects.create(
                    candidate=c,
                    data={**c.li_data['api_data'], 'extVersion': '_migrated'}
                )


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0063_remove_candidate_location'),
    ]

    operations = [
        migrations.CreateModel(
            name='CandidateLinkedinData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='candidate',
            name='linkedin_slug',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='candidate',
            unique_together={('agency', 'linkedin_slug')},
        ),
        migrations.AddField(
            model_name='candidatelinkedindata',
            name='candidate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linkedin_data_set', to='core.Candidate'),
        ),
        migrations.AddField(
            model_name='candidatelinkedindata',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(set_linkedin_slug, migrations.RunPython.noop),
        migrations.RunPython(copy_li_data, migrations.RunPython.noop),
    ]
